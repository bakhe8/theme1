{"version":3,"file":"analytics-util-global-storage.umd.js","sources":["../src/index.js"],"sourcesContent":["import { OBJECT, PREFIX, UNDEFINED } from '@analytics/type-utils'\n\nexport const GLOBAL = 'global'\n\nexport const KEY = PREFIX + GLOBAL + PREFIX\n\nexport const globalContext = (typeof self === OBJECT && self.self === self && self) || (typeof global === OBJECT && global[GLOBAL] === global && global) || this\n\n/* initialize global object */\nif (!globalContext[KEY]) {\n  globalContext[KEY] = {}\n}\n/**\n * Get value from global context\n * @param {string} key - Key of value to get\n * @returns {*} value\n */\nexport function get(key) {\n  return globalContext[KEY][key]\n}\n\n/**\n * Set value to global context\n * @param {string} key - Key of value to set\n * @param {*} value \n * @returns value\n */\nexport function set(key, value) {\n  return globalContext[KEY][key] = value\n}\n\n/**\n * Remove value to global context\n * @param {string} key - Key of value to remove\n */\nexport function remove(key) {\n  delete globalContext[KEY][key]\n}\n\n/**\n * Wrap localStorage & session storage checks\n * @param {string} type - localStorage or sessionStorage\n * @param {string} storageOperation - getItem, setItem, removeItem\n * @param {function} fallbackFunction - fallback function\n */\nexport function wrap(type, operation, fallback) {\n  let fn\n  try {\n    if (hasSupport(type)) {\n      const storage = window[type]\n      fn = storage[operation].bind(storage)\n    }\n  } catch(e) {}\n  return fn || fallback\n}\n\nconst cache = {}\nexport function hasSupport(type) {\n  if (typeof cache[type] !== UNDEFINED) {\n    return cache[type]\n  }\n  try {\n    const storage = window[type]\n    // test for private safari\n    storage.setItem(UNDEFINED, UNDEFINED)\n    storage.removeItem(UNDEFINED)\n  } catch (err) {\n    return cache[type] = false\n  }\n  return cache[type] = true\n}\n\n/*\n// () => localStorage)\n// () => sessionStorage)\nexport function isSupported(getStorage) {\n  try {\n    const testKey = '__' + undef\n    getStorage().setItem(testKey, testKey)\n    getStorage().removeItem(testKey)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n*/\n"],"names":["GLOBAL","KEY","PREFIX","globalContext","self","OBJECT","global","this","cache","hasSupport","type","UNDEFINED","storage","window","setItem","removeItem","err","key","value","operation","fallback","fn","bind","e"],"mappings":"kTAEaA,IAAAA,EAAS,SAETC,EAAMC,EAAMA,OAAGF,EAASE,EAExBA,OAAAC,SAAwBC,OAASC,EAAMA,QAAID,KAAKA,OAASA,MAAQA,aAAiBE,SAAWD,EAAMA,QAAIC,OAAON,KAAYM,QAAUA,aAAWC,EAGvJJ,EAAcF,KACjBE,EAAcF,GAAO,CAAA,GA8CvB,IAAMO,EAAQ,CAAA,EACP,SAASC,EAAWC,GACzB,UAAWF,EAAME,KAAUC,EAAAA,UACzB,OAAOH,EAAME,GAEf,IACE,IAAME,EAAUC,OAAOH,GAEvBE,EAAQE,QAAQH,EAASA,UAAEA,aAC3BC,EAAQG,WAAWJ,EAASA,UAC9B,CAAE,MAAOK,GACP,OAAOR,EAAME,IAAQ,CACvB,CACA,OAAOF,EAAME,IAAQ,CACvB,0BArDgB,SAAIO,GAClB,OAAOd,EAAcF,GAAKgB,EAC5B,4CAgBgB,SAAOA,UACdd,EAAcF,GAAKgB,EAC5B,QAVgB,SAAIA,EAAKC,GACvB,OAAOf,EAAcF,GAAKgB,GAAOC,CACnC,SAgBgB,SAAKR,EAAMS,EAAWC,GACpC,IAAIC,EACJ,IACE,GAAIZ,EAAWC,GAAO,CACpB,IAAME,EAAUC,OAAOH,GACvBW,EAAKT,EAAQO,GAAWG,KAAKV,EAC/B,CACF,CAAE,MAAMW,GAAG,CACX,OAAOF,GAAMD,CACf"}